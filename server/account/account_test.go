package account

import (
	"bytes"
	"encoding/hex"
	"testing"
)

func TestNewAccountFromPubKey(t *testing.T) {
	tests := []struct {
		pk      []byte
		wantErr bool
	}{
		{
			pk: []byte{0x03, 0xbb, 0x43, 0xcf, 0xfd, 0x94,
				0xac, 0x0e, 0xb7, 0xe2, 0x21, 0x93, 0x08, 0xdb, 0x24, 0x14,
				0x90, 0xce, 0x69, 0x09, 0x6c, 0x0f, 0xe7, 0x5c, 0x3c, 0xcf,
				0xfc, 0x13, 0x30, 0x0d, 0xa9, 0xc5, 0x35},
			wantErr: false,
		},
		{
			pk: []byte{0x0bb, 0xbb, 0x43, 0xcf, 0xfd, 0x94,
				0xac, 0x0e, 0xb7, 0xe2, 0x21, 0x93, 0x08, 0xdb, 0x24, 0x14,
				0x90, 0xce, 0x69, 0x09, 0x6c, 0x0f, 0xe7, 0x5c, 0x3c, 0xcf,
				0xfc, 0x13, 0x30, 0x0d, 0xa9, 0xc5, 0x35},
			wantErr: true,
		},
		{
			pk:      nil,
			wantErr: true,
		},
	}

	for idx, tc := range tests {
		_, err := NewAccountFromPubKey(tc.pk)
		if (err != nil) != tc.wantErr {
			t.Errorf("[NewAccountFromPubkey #%d] error: %v, wantErr: %v",
				idx+1, err, tc.wantErr)
		}
	}
}

func TestNewID(t *testing.T) {
	tests := []struct {
		pk         []byte
		id         []byte
		idMismatch bool
	}{
		{
			pk: []byte{0x03, 0xbb, 0x43, 0xcf, 0xfd, 0x94,
				0xac, 0x0e, 0xb7, 0xe2, 0x21, 0x93, 0x08, 0xdb, 0x24, 0x14,
				0x90, 0xce, 0x69, 0x09, 0x6c, 0x0f, 0xe7, 0x5c, 0x3c, 0xcf,
				0xfc, 0x13, 0x30, 0x0d, 0xa9, 0xc5, 0x35},
			id: []byte{0x61, 0x24, 0xaa, 0x30, 0x17, 0xa3, 0xd3, 0x23,
				0x0d, 0xf9, 0xb6, 0x76, 0x58, 0xb5, 0xd3, 0xca, 0x14, 0x79,
				0x1a, 0x8e, 0xd4, 0x66, 0x66, 0x1c, 0x69, 0x25, 0x6c, 0x03,
				0xb9, 0xed, 0xc3, 0xd1},
			idMismatch: false,
		},
		{
			pk: []byte{},
			id: []byte{0x61, 0x24, 0xaa, 0x30, 0x17, 0xa3, 0xd3, 0x23,
				0x0d, 0xf9, 0xb6, 0x76, 0x58, 0xb5, 0xd3, 0xca, 0x14, 0x79,
				0x1a, 0x8e, 0xd4, 0x66, 0x66, 0x1c, 0x69, 0x25, 0x6c, 0x03,
				0xb9, 0xed, 0xc3, 0xd1},
			idMismatch: true,
		},
		{
			pk: nil,
			id: []byte{0x61, 0x24, 0xaa, 0x30, 0x17, 0xa3, 0xd3, 0x23,
				0x0d, 0xf9, 0xb6, 0x76, 0x58, 0xb5, 0xd3, 0xca, 0x14, 0x79,
				0x1a, 0x8e, 0xd4, 0x66, 0x66, 0x1c, 0x69, 0x25, 0x6c, 0x03,
				0xb9, 0xed, 0xc3, 0xd1},
			idMismatch: true,
		},
	}

	for idx, tc := range tests {
		id := NewID(tc.pk)
		if !bytes.Equal(id[:], tc.id) != tc.idMismatch {
			t.Errorf("[NewID #%d] expected id %v, got %v",
				idx+1, hex.EncodeToString(tc.id), hex.EncodeToString(id[:]))
		}
	}
}
